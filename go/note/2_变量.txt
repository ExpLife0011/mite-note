1.var 关键字定义变量

2. :=方式定义变量

3. 一次定义多个变量

4.多变量赋值

5.数组的定义及赋值

6.赋值占位符 “_” 

7.局部变量不允许定义但是未使用，可以通过
	var i int
	_ = i 
	来避免编译错误


8.重新赋值与定义同名新变量的区别(生命周期)

9.定义常量　const 
  常量组

10. 类型推断
	变量组的中的类型和初始化值推断

11.枚举 关键字iota 定义常量组从０开始按行自增枚举
   常量定义的自动推断
 const (
	Sunday = iota	//0
	Monday
	Tuesday
	Wednesday
		)
 const (
	_ = iota
	KB int64 = 1 << (10*iota)	//iota = 1
	MB							//具有相同表达式，iota=2
	GB
	TB
		)

 const (
		A,B = iota,itoa << 10	//0,0 << 10
		C,D						//1,1 << 10
		 )

 //iota　被打断需要显示恢复
 const (
		A = iota	//0
		B			//1
		C = 'c'		//c
		D			// 和上一行有相同的值
		E = iota	//4	,计数任然继续
		F			//5
		 )

12.强类型
	常量会被编译器自动转换，但是变量是强类型的

13.基本数据类型
	类型	长度	默认值	说明
	bool	 1		false
	byte	 1		0		uint8
	rune	 4		0		Unicode Code Point,int32
	int,uint 4/8			32/64位
	uintptr　4/8			32/64位指针
	array					值类型
	struct
	string					UTF-8
	slice			nil		引用
	map				nil		引用
	channel			nil		引用
	interface		nil		接口
	function		nil		函数

13.引用类型
	new make

14.类型转换
	var b byte = 100
	var n int = int(b)	//显式转换

15. 字符串
	默认空字符串　""
	用索引访问 s[i]
	不能用序号获取字节元素指针　＆s[i]是非法的
	不可变类型，不能修改字节数组
	数组尾部是没有NULL的
	使用　"`"　定义不做转义处理的字符串,支持换行
	s := `ab\r\n`
	连接换行字符串，＋号必须在上一行
	s := "hello" +
		"world"
	索引返回的子串和原字符串指向同一个地址
	s1 := s[:5]
	s2 := s[7:]
	
	rune 支持unicode ''字符
	var c1 rune = '我'

	要修改字符串先拷贝成 []rune或者[]byte再操作
	s := "abcd"
	bs := []byte(s)

	bs[1] = 'B'

	u := "我们"
	us :=[]rune(u)
	us[1] = '的'

	字符串的遍历
	for i:=0;i<len(s);i++ {
		fmt.Printf("%c,",s[i])	//byte
	}
	for _,r := range s {
		fmt.Printf("%c,",r)		//rune
	}

16 指针
	指针类型　*T,指针的指针　**T,
	包含包及包名前缀的　*<package>.T
	默认nil
	"&"	取地址
	"*" 访问对象
	不支持->,全部使用 . 访问
	不能对指针做加减法运算
	可以在unsafe.Pointer 和任意类型指针之间进行转换
	返回局部变量的指针是安全的
	func test() *int {
		x := 100
		return &x		
	}

	要实现指针偏移的运算，需要将Pointer 转换成　uintptr


17.自定义类型
	type 
	type myint int
	现在myint 和 int 是两种数据类型，不能隐式转换


